# -*- coding: utf-8 -*-
# To generate new template for Zabbix please run
# python3 ./mamonsu.py export template test.xml -c /etc/mamonsu/agent.conf --add-plugins=/etc/mamonsu/plugins
#

from mamonsu.plugins.pgsql.plugin import PgsqlPlugin as Plugin
from mamonsu.plugins.pgsql.pool import Pooler
import json


class Activity(Plugin):

    DEFAULT_CONFIG = {
        'enabled': str(True)
    }
    Interval = 10

    AgentPluginType = 'pg'

    key_pg_stat_activity = 'pgsql.pg_stat_activity.discovery{0}'
    key_pg_stat_activity_count = 'pgsql.pg_stat_activity.discovery.count[{0}]'
    key_pg_stat_activity_duration = 'pgsql.pg_stat_activity.discovery.duration[{0}]'
    key_pg_stat_activity_query_zbx = 'pgsql.pg_stat_activity.discovery.query[{0}]'

    key_pg_stat_activity_query = "SELECT md5(query) as id, query, datname, application_name, sum(extract(epoch from(now() - query_start))) AS duration, count(1) as count, state FROM pg_stat_activity WHERE query !~* '^commit|^end|^begin|^show|^set|^$' GROUP BY id, query, datname, application_name,state"


    def run(self, zbx):

        discovery = []

        result = Pooler.query(self.key_pg_stat_activity_query)

        for row in result:

            id = row[0]
            key = '{},{},{},{}'.format(id,row[2],row[3],row[6])

            zbx.send(self.key_pg_stat_activity_count.format(key),row[5])
            zbx.send(self.key_pg_stat_activity_duration.format(key),row[4])
            zbx.send(self.key_pg_stat_activity_query_zbx.format(key),row[1])

            discovery.append({
                '{' + '#ID}': id,
                '{' + '#QUERY}': row[1],
                '{' + '#DATNAME}': row[2],
                '{' + '#APP}': row[3],
                '{' + '#STATE}': row[6]
            })

        zbx.send(self.key_pg_stat_activity.format('[]'), json.dumps(discovery))

    def items(self, template):

        result = ''

        if self.Type == "mamonsu":
            delay = self.plugin_config('interval')
            value_type = Plugin.VALUE_TYPE.text
        else:
            delay = 5  # TODO check delay
            value_type = Plugin.VALUE_TYPE.numeric_unsigned

        result += template.item({
            'name': 'PostgreSQL: pg_stat_activity dump',
            'key': self.right_type(self.key_pg_stat_activity),
            'delay': delay,
            'value_type': value_type
        })
        return result